/*（投资策略规划）你所掌握的算法知识帮助你从Acme计算机公司获得了一份令人兴奋的工作，签约奖金1万美元。你决定利用这笔钱进行投资，目标是10年后获得最大回报。你决定请Amalgamated投资公司管理你的投资，该公司的投资回报规则如下。该公司提供n种不同的投资产品，从1~n编号。在第j年，第i种投资产品的回报率为r[i][j]。换句话说，如果你在第j年在第i种投资产品投入d美元，那么在第j年年底，你会得到dr[i][j] 美元。回报率是有保证的，即未来10年每种投资产品的回报率均已知。你每年只能做出一次投资决定。在每年年底，你既可以将钱继续投入到上一年选择的投资产品中，也可以转移到其他投资产品中（转移到已有的投资产品，或者新的投资产品）。如果跨年时你不做投资转移，需要支付f1美元的费用。否则，需要支付f2美元的费用，其中f2>f1。
a. 如上所述，本问题允许你每年将钱投入到多种投资产品中。证明：存在最优投资策略，每年都将所有钱投入到单一投资产品中（记住最优投资策略只需最大化10年的回报，无需关心任何其他目标，如最小化风险）。
b. 证明：规划最优投资策略问题具有最优子结构性质。
c. 设计最优投资策略规划算法，分析算法时间复杂度。*/

/*最优子结构设e[i][j]为第i种产品在第j年的回报,则:
 * 在第j年做不投资转换时：value1=(e[i][j-1]-f1)*r[i][j] 
 * 在第j年做投资转换时：value2=max((e[i][j-1]-f2)*r[k][j])其中1<k<n,且k!=i
 * e[i][j]=max(value1,value2);
 * */

/*
*参数说明:
*r:每种产品在每年的投资回报率r[i][j]表示第i号产品在第j年的投资回报率
*n:产品总数
*m:最长投资年数
*c:初始投资资金 
*/

function investStrategy(r,n,m,c){
    //i:i表示产品序号,j表示年,e[i][j]表示第i号产品在第j年的最大投资回报,p[i][j]表示在j年选择的产品
    
    let f1=10,f2=15;//f1,f2代表投资转移或不转移需交的费用
    let e=[],p=[];
    //创建表e,p;
    for(let i=0;i<=n;i++){
        let ie=[],ip=[];            
        for(let j=0;j<=m;j++){
            ie.push(0);
            ip.push(i);
        }
        e.push(ie);
        p.push(ip);
    }

    //初始化，第i种产品在第1年的投资回报
    for(let i=1;i<=n;i++){
        e[i][1]=c*r[i][1];
        p[i][1]=i;
    }

    //计算每种产品在每年的最优投资回报
    for(let i=1;i<=n;i++){
        for(let j=2;j<=m;j++){
           
            //第一种情况,第j年不做投资变换
            let value1=(e[i][j-1]-f1)*r[i][j];
            //第二种情况，第j年做投资变换,换为第k种产品
            let value2=0;
           
            for(let k=1;k<=n;k++){
                if(k!=i){
                    let currentValue=(e[i][j-1]-f2)*r[k][j];
                    if(value2<currentValue){
                        value2=currentValue;
                        p[i][j]=k;
                    }
                }
            }
            
            e[i][j]=Math.max(value1,value2);
            p[i][j]=value1>value2?p[i][j-1]:p[i][j];
        }
    }

    //选择最大的投资策略，即比较每种产品在第m年的投资收益
    let max=e[1][m],k=1;
    for(let i=2;i<=n;i++){
        if(max<e[i][m]){
            max=e[i][m];
            k=i;
        }
    }

    return [e,max,k,p];
}

//test-----
 let r=[[0, 0,      0,      0,      0,      0,      0,      0],
        [0, 1.5,    2,      1.3,    2.4,    2.5,    1.9,    3.3],
        [0, 2.5,    2,      4,      1.2,    2.2,    2.0,    1.3],
        [0, 1.5,    2,      1.3,    2.4,    2.5,    1.9,    5.3],
        [0, 2.5,    2,      1.3,    2.4,    2.5,    1.9,    1.7],
        [0, 1.8,    4.1,    1.3,    1.4,    2.5,    2.9,    3.3],
        [0, 1.3,    2,      1.3,    2.4,    2.5,    1.9,    2.6],
        [0, 1.4,    2.2,    3.3,    2.4,    1.5,    2.9,    1.3],
    ]
let [e,max,k,p]=this.investStrategy(r,7,7,50);
for(let i=1;i<=7;i++){
    console.log(p[k][i]);
}
//2 5 5 1 1 5 3